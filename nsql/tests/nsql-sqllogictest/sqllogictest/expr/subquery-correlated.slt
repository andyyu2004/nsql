statement ok
CREATE TABLE integers(i integer, id integer PRIMARY KEY GENERATED ALWAYS AS IDENTITY)

statement ok
INSERT INTO integers VALUES (1), (2), (3), (NULL)

# scalar select with correlation
query II rowsort
SELECT i, (SELECT 42+i) FROM integers;
----
1 43
2 44
3 45
NULL NULL

query II
SELECT i, (SELECT 42+i1.i) AS j FROM integers i1 ORDER BY i;
----
NULL NULL
1 43
2 44
3 45

# ORDER BY correlated subquery
query I
SELECT i FROM integers i1 ORDER BY (SELECT 100-i1.i);
----
NULL
3
2
1

# subquery with LIMIT
# query II rowsort
# SELECT i, (SELECT 42+i1.i FROM integers LIMIT 1) AS j FROM integers i1 
# ----
# NULL	NULL
# 1	43
# 2	44
# 3	45

# # subquery with LIMIT 0
# query II
# SELECT i, (SELECT 42+i1.i FROM integers LIMIT 0) AS j FROM integers i1 ORDER BY i
# ----
# NULL	NULL
# 1	NULL
# 2	NULL
# 3	NULL


# scalar filter with correlation
query II rowsort
SELECT i FROM integers WHERE i = (SELECT i WHERE i = 2);
----
2

statement ok
CREATE TABLE employee (
    id int PRIMARY KEY,
    name text,
    department text,
    salary int
)

statement ok
INSERT INTO employee (id, name, department, salary)
VALUES (1, 'Alice', 'HR',          50),
       (2, 'Bob',   'Engineering', 100),
       (3, 'Carol', 'Engineering', 70),
       (4, 'Dan',   'Engineering', 60),
       (5, 'Eve',   'HR',          50),
       (6, 'Frank', 'Engineering', 80)


# correlated aggregate
query ITD rowsort
SELECT id,
       name,
       (SELECT AVG(salary)
          FROM employee
       WHERE department = emp.department) AS department_average
   FROM employee emp
----
1  Alice 50.0 
2  Bob   77.5 
3  Carol 77.5 
4  Dan   77.5 
5  Eve   50.0 
6  Frank 77.5 

query ITD
SELECT id,
       name,
       (SELECT salary
          FROM employee
       WHERE emp.department <> 'bad') AS salary
   FROM employee emp

