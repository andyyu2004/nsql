use expect_test::expect;

use crate::explain::check_explain;

#[test]
fn test_explain() -> nsql::Result<()> {
    check_explain(
        [
            "CREATE TABLE integers (id int PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, i int)",
            "INSERT INTO integers(i) VALUES (0), (1), (2), (NULL)",
        ],
        "EXPLAIN ANALYZE TIMING OFF SELECT id, i + 1 FROM integers WHERE i <> 2",
        expect![[r#"
            projection (integers.id, #15(integers.i, 1)) in=2 out=2
              filter #6(integers.i, 2) in=4 out=2
                scan integers (id, i) in=0 out=4
        "#]],
    )?;

    // ensure nodes that aren't run still have profiling information
    check_explain(
        [],
        "EXPLAIN ANALYZE TIMING OFF SELECT 1 WHERE 1 = 2",
        expect![[r#"
            projection (1) in=0 out=0
              filter #5(1, 2) in=1 out=0
                dummy scan in=0 out=1
        "#]],
    )?;

    // ensure `OperatorState::Again` isn't counted multiple times as separate inputs
    check_explain(
        [],
        "EXPLAIN ANALYZE TIMING OFF SELECT * FROM (VALUES (1), (2)) CROSS JOIN (VALUES (3), (4))",
        expect![[r#"
            cross join in=4 out=4
              scan 2 values in=0 out=2
              scan 2 values in=0 out=2
        "#]],
    )?;

    Ok(())
}
