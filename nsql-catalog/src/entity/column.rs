use std::fmt;

use nsql_storage::expr::Expr;

use super::table::ColumnStorageInfo;
use super::*;
use crate::SystemEntityPrivate;

#[derive(Debug, Clone, PartialEq, Eq, Hash, FromFlatTuple, IntoFlatTuple)]
pub struct Column {
    pub(crate) table: Oid<Table>,
    pub(crate) index: ColumnIndex,
    pub(crate) ty: LogicalType,
    pub(crate) name: Name,
    pub(crate) is_primary_key: bool,
    pub(crate) identity: ColumnIdentity,
    pub(crate) default_expr: Expr,
}

impl From<Column> for ColumnStorageInfo {
    #[inline]
    fn from(col: Column) -> Self {
        ColumnStorageInfo { is_primary_key: col.is_primary_key() }
    }
}

impl From<&Column> for ColumnStorageInfo {
    fn from(col: &Column) -> Self {
        ColumnStorageInfo::new(col.is_primary_key)
    }
}

impl Column {
    pub fn new(
        table: Oid<Table>,
        name: Name,
        index: ColumnIndex,
        ty: LogicalType,
        is_primary_key: bool,
        identity: ColumnIdentity,
        default_expr: Expr,
    ) -> Self {
        Self { table, name, index, ty, is_primary_key, identity, default_expr }
    }

    #[inline]
    pub fn index(&self) -> ColumnIndex {
        self.index
    }

    #[inline]
    pub fn name(&self) -> Name {
        Name::clone(&self.name)
    }

    #[inline]
    pub fn logical_type(&self) -> LogicalType {
        self.ty.clone()
    }

    #[inline]
    pub fn is_primary_key(&self) -> bool {
        self.is_primary_key
    }

    #[inline]
    pub fn default_expr(&self) -> &Expr {
        &self.default_expr
    }
}

#[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
pub struct ColumnIndex {
    index: u8,
}

impl fmt::Display for ColumnIndex {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        write!(f, "{}", self.index)
    }
}

impl FromValue for ColumnIndex {
    #[inline]
    fn from_value(value: Value) -> Result<Self, CastError> {
        let index = value.cast::<u8>()?;
        Ok(Self { index })
    }
}

impl From<ColumnIndex> for Value {
    #[inline]
    fn from(val: ColumnIndex) -> Self {
        Value::Byte(val.index)
    }
}

impl ColumnIndex {
    // FIXME ideally this would be private
    #[inline]
    pub fn new(index: u8) -> Self {
        Self { index }
    }

    #[inline]
    pub fn as_usize(self) -> usize {
        self.index as usize
    }
}

#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]
#[repr(u8)]
pub enum ColumnIdentity {
    /// Not an identity column.
    None = b'\0',
    /// Generated by default.
    ByDefault = b'd',
    /// Generated always.
    Always = b'a',
}

impl FromValue for ColumnIdentity {
    #[inline]
    fn from_value(value: Value) -> Result<Self, CastError> {
        let index = value.cast::<u8>()?;
        match index {
            b'\0' => Ok(Self::None),
            b'd' => Ok(Self::ByDefault),
            b'a' => Ok(Self::Always),
            _ => panic!("invalid column identity value"),
        }
    }
}

impl From<ColumnIdentity> for Value {
    #[inline]
    fn from(v: ColumnIdentity) -> Self {
        Value::Byte(v as u8)
    }
}

impl SystemEntity for Column {
    type Parent = Table;

    type Key = (Oid<Self::Parent>, ColumnIndex);

    type SearchKey = (Oid<Self::Parent>, Name);

    #[inline]
    fn key(&self) -> Self::Key {
        (self.table, self.index)
    }

    #[inline]
    fn search_key(&self) -> Self::SearchKey {
        (self.table, self.name())
    }

    #[inline]
    fn name<'env: 'txn, 'txn, S: StorageEngine, M: ExecutionMode<'env, S>>(
        &self,
        _catalog: Catalog<'env, S>,
        _tx: &dyn TransactionContext<'env, 'txn, S, M>,
    ) -> Result<Name> {
        Ok(Name::clone(&self.name))
    }

    #[inline]
    fn desc() -> &'static str {
        "column"
    }

    #[inline]
    fn parent_oid<'env: 'txn, 'txn, S: StorageEngine, M: ExecutionMode<'env, S>>(
        &self,
        _catalog: Catalog<'env, S>,
        _tx: &dyn TransactionContext<'env, 'txn, S, M>,
    ) -> Result<Option<Oid<Self::Parent>>> {
        Ok(Some(self.table))
    }

    fn extract_cache<'a, 'env, 'txn, S: StorageEngine, M: ExecutionMode<'env, S>>(
        caches: &'a TransactionLocalCatalogCaches<'env, 'txn, S, M>,
    ) -> &'a OnceLock<SystemTableView<'env, 'txn, S, M, Self>> {
        &caches.columns
    }
}

impl SystemEntityPrivate for Column {
    const TABLE: Oid<Table> = Table::ATTRIBUTE;

    fn bootstrap_column_info() -> Vec<BootstrapColumn> {
        vec![
            BootstrapColumn {
                ty: LogicalType::Oid,
                name: "table",
                is_primary_key: true,
                ..Default::default()
            },
            BootstrapColumn {
                ty: LogicalType::Byte,
                name: "index",
                is_primary_key: true,
                ..Default::default()
            },
            BootstrapColumn { ty: LogicalType::Type, name: "ty", ..Default::default() },
            BootstrapColumn { ty: LogicalType::Text, name: "name", ..Default::default() },
            BootstrapColumn { ty: LogicalType::Bool, name: "is_primary_key", ..Default::default() },
            BootstrapColumn { ty: LogicalType::Byte, name: "identity", ..Default::default() },
            BootstrapColumn { ty: LogicalType::Expr, name: "default_expr", ..Default::default() },
        ]
    }
}
